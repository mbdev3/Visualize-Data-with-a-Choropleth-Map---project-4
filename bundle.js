(function (React$1, ReactDOM, d3$1, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl = 'https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/counties.json';

  const useWorldAtlas = () => {
    const [data, setData] = React$1.useState(null);
  	
    React$1.useEffect(() => {
      d3$1.json(jsonUrl).then(topology=>{
        const {counties,nation,states} = topology.objects;
      setData(topojson.feature(topology,counties).features);
      });
    }, []);

    return data;
  };

  const jsonUrl$1 =
    'https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/for_user_education.json';

  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3$1.json(jsonUrl$1).then((data) => {
        
        setData(
          data
        );
      });
    }, []);

    return data;
  };

  const path = d3$1.geoPath();

  const missingDataColor = 'gray';
  const Marks = ({
    worldAtlas,
    rowByID,
    x,
    color,
    onMouseEnter,
    onMouseOut,
  }) => (
    React.createElement( 'g', null,
      worldAtlas.map((feature) => {
        const d = rowByID.get(feature.id);
        // console.log((path(feature)));
        return (
          React.createElement( 'path', {
            className: "county", d: path(feature), fill: d
                ? color(d.bachelorsOrHigher)
                : missingDataColor, 'data-fips': d.fips, 'data-education': d.bachelorsOrHigher, onMouseEnter: (e) => onMouseEnter(d, e), onMouseOut: () => onMouseOut(null) })
        );
      })
    )
  );

  const Legend = ({
    x,
    color,
    legendValues,
  }) => {
    return (
      React.createElement( 'g', { id: "legend" },
        color.range().map((r, i) => {
          let d = color.invertExtent(r);

          d[0] == null
            ? (d[0] = x.domain()[0])
            : null;
          d[1] == null
            ? (d[1] = x.domain()[1])
            : null;
          console.log(d[1]);

          return (
            React.createElement( React.Fragment, null,
              React.createElement( 'rect', {
                x: x(d[0]), height: 8, width: x(d[1]) - x(d[0]), fill: r }),
              React.createElement( 'line', {
                x1: x(d[1]), x2: x(d[1]), y1: 0, y2: 20 }),
              React.createElement( 'text', {
               x: x(d[1]), y: 40, textAnchor: "middle" },
                d[1]+'%'
              )
            )
          );
        })
      )
    );
  };

  const App = () => {
    const worldAtlas = useWorldAtlas();

    const data = useData();

    if (!worldAtlas || !data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    const x = d3$1.scaleLinear()
      .domain([1, 60])
      .rangeRound([550, 850]);

    const color = d3$1.scaleThreshold()
      .domain([3, 12, 21, 30, 39, 48, 57, 66])
      .range(d3.schemePurples[8]);

    const rowByID = new Map();
    data.forEach((d) => {
      const id = d.fips;
      rowByID.set(id, d);
    });
    const onMouseEnter = (d, e) => {
      let b = d.bachelorsOrHigher;
      let a = d.area_name;
      let s = d.state;

      e.pageX > window.innerWidth / 2
        ? (e.pageX = e.pageX - 120)
        : e.pageX;
      a.length > 15 &&
      e.pageX > window.innerWidth / 2
        ? (e.pageY = e.pageY - 40)
        : e.pageY;
      tooldiv
        .style('visibility', 'visible')
        .html(() => `${a}, ${s}: ${b}%`)
        .style('top', e.pageY - 40 + 'px')
        .style('left', e.pageX + 'px')
        .attr('data-education', b);
    };
    const onMouseOut = () => {
      tooldiv.style('visibility', 'hidden');
    };
    return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'div', { id: "title" },
          React$1__default.createElement( 'h1', null, "United States Educational Attainment" ),
          React$1__default.createElement( 'p', { id: "description" }, "Percentage of adults age 25 and older with a bachelor's degree or higher (2010-2014)")
        ),
        React$1__default.createElement( 'div', { className: "copyright" }, "Made by ", React$1__default.createElement( 'a', { href: "https://thembdev.com" },
            React$1__default.createElement( 'img', { src: "https://mbdev-utils.s3.eu-west-3.amazonaws.com/mbdev_logo_sm.svg", alt: "mbdev" })
          )
        ),
        React$1__default.createElement( 'svg', { width: "940", height: "600" },
          React$1__default.createElement( 'g', { className: "map" },
            React$1__default.createElement( Legend, { x: x, color: color }),
            React$1__default.createElement( Marks, {
              worldAtlas: worldAtlas, rowByID: rowByID, x: x, color: color, onMouseEnter: (e, d) =>
                onMouseEnter(e, d), onMouseOut: () => onMouseOut() })
          )
        )
      )
    );
  };
  const rootElement = document.getElementById(
    'root'
  );
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,